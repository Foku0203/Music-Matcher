# Generated by Django 5.2.6 on 2025-09-18 22:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Artist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("slug", models.SlugField(blank=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="AppUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "active"), ("suspended", "suspended")],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("is_admin", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
                "ordering": ["-created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AdminActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action", models.CharField(max_length=50)),
                ("detail", models.TextField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.CharField(blank=True, max_length=200, null=True)),
                ("old_value", models.JSONField(blank=True, null=True)),
                ("new_value", models.JSONField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "admin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admin_activities",
                        to="matcher.appuser",
                    ),
                ),
            ],
            options={
                "db_table": "admin_activities",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Album",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("year", models.IntegerField(blank=True, null=True)),
                (
                    "artist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="albums",
                        to="matcher.artist",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Emotion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, unique=True)),
            ],
            options={
                "db_table": "emotions",
                "ordering": ["name"],
                "indexes": [models.Index(fields=["name"], name="idx_emotion_name")],
            },
        ),
        migrations.CreateModel(
            name="Song",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(blank=True, unique=True)),
                ("duration", models.IntegerField(blank=True, null=True)),
                (
                    "language",
                    models.CharField(
                        choices=[("th", "Thai"), ("en", "English")],
                        default="th",
                        max_length=10,
                    ),
                ),
                ("release_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "album",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="songs",
                        to="matcher.album",
                    ),
                ),
                (
                    "artist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="songs",
                        to="matcher.artist",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Playlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("is_public", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "mood_tag",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="matcher.emotion",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlists",
                        to="matcher.appuser",
                    ),
                ),
                (
                    "songs",
                    models.ManyToManyField(
                        related_name="in_playlists", to="matcher.song"
                    ),
                ),
            ],
            options={
                "db_table": "playlists",
            },
        ),
        migrations.CreateModel(
            name="SongEmotion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "confidence",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        default=1.0,
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[("ml", "ML"), ("rule", "Rule"), ("manual", "Manual")],
                        max_length=20,
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "emotion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emotion_songs",
                        to="matcher.emotion",
                    ),
                ),
                (
                    "song",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="song_emotions",
                        to="matcher.song",
                    ),
                ),
            ],
            options={
                "db_table": "song_emotions",
                "ordering": ["song_id", "emotion_id"],
            },
        ),
        migrations.CreateModel(
            name="SongGenre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "genre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="matcher.genre"
                    ),
                ),
                (
                    "song",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="matcher.song"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="song",
            name="genres",
            field=models.ManyToManyField(
                related_name="songs", through="matcher.SongGenre", to="matcher.genre"
            ),
        ),
        migrations.CreateModel(
            name="SongLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        choices=[("youtube", "YouTube"), ("spotify", "Spotify")],
                        max_length=20,
                    ),
                ),
                (
                    "url",
                    models.URLField(validators=[django.core.validators.URLValidator()]),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "song",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="matcher.song",
                    ),
                ),
            ],
            options={
                "db_table": "song_links",
            },
        ),
        migrations.CreateModel(
            name="UserBehavior",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedback",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("like", "like"),
                            ("dislike", "dislike"),
                            ("skip", "skip"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("session_id", models.UUIDField(default=uuid.uuid4)),
                (
                    "device_info",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "clicked_song",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="clicked_by",
                        to="matcher.song",
                    ),
                ),
                (
                    "detected_emotion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="matcher.emotion",
                    ),
                ),
                (
                    "recommended_song",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recommended_to",
                        to="matcher.song",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="behaviors",
                        to="matcher.appuser",
                    ),
                ),
            ],
            options={
                "db_table": "user_behaviors",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="appuser",
            index=models.Index(fields=["email"], name="idx_users_email"),
        ),
        migrations.AddIndex(
            model_name="appuser",
            index=models.Index(fields=["username"], name="idx_users_username"),
        ),
        migrations.AddIndex(
            model_name="appuser",
            index=models.Index(fields=["status"], name="idx_users_status"),
        ),
        migrations.AddIndex(
            model_name="adminactivity",
            index=models.Index(fields=["action"], name="idx_admin_action"),
        ),
        migrations.AlterUniqueTogether(
            name="album",
            unique_together={("artist", "title")},
        ),
        migrations.AddIndex(
            model_name="songemotion",
            index=models.Index(fields=["song"], name="idx_se_song"),
        ),
        migrations.AddIndex(
            model_name="songemotion",
            index=models.Index(fields=["emotion"], name="idx_se_emotion"),
        ),
        migrations.AddIndex(
            model_name="songemotion",
            index=models.Index(fields=["source"], name="idx_se_source"),
        ),
        migrations.AlterUniqueTogether(
            name="songemotion",
            unique_together={("song", "emotion")},
        ),
        migrations.AlterUniqueTogether(
            name="songgenre",
            unique_together={("song", "genre")},
        ),
        migrations.AddIndex(
            model_name="song",
            index=models.Index(fields=["title"], name="idx_song_title"),
        ),
        migrations.AlterUniqueTogether(
            name="song",
            unique_together={("title", "artist")},
        ),
        migrations.AlterUniqueTogether(
            name="songlink",
            unique_together={("song", "platform")},
        ),
        migrations.AddIndex(
            model_name="userbehavior",
            index=models.Index(fields=["ip_address"], name="idx_behavior_ip"),
        ),
    ]
